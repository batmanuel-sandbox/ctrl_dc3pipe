#<?cfg paf policy ?>
#
# Pipeline Layer Policy
#

# this part is used by the orchestration layer to determine if
# this pipeline can run on a particular platform or with a particular
# database server
#
requires: {
   database: {
      type:  MySQL
   }

   platform: {
      minCoreCount:  2
   }
}

# this part is used by the orchestration layer to 
setup: {
   # the schema of this item is determined by the database type given 
   # above in requires.database.type.  
   database:  {
      # If not provided, this defaults to $CTRL_DC3PIPE_DIR
      # 
      # scriptRepository: /lsst/...
      script: lsstSchema4mysql.sql
      script: lsstPipelineSetup4mysql.sql
   }
   data:  {
      
   }
}

framework: {
   # the type determines the schema of the "execute" policy below
   type:  standard

   # this is the file that should be sourced to set the environment on
   # the head node where the pipeline is executed.  The file path component
   # can be represented as $ENVVAR which will be replaced with the
   # value of the environment variable with the name ENVVAR.
   # 
   environment: "$PEX_HARNESS_DIR/etc/setup.sh".

   # this is the execution script that we will use to start the
   # pipeline on the head node of the platform.  The file path component
   # can be represented as $ENVVAR which will be replaced with the
   # value of the environment variable with the name ENVVAR.
   # 
   exec:  "$PEX_HARNESS_DIR/bin/launchPipeline.sh"
}

# the contents of this item is passed to the harness to configure the
# pipeline at launch time.
# 
execute: {

   # executionMode: oneloop
   localLogMode: true
   eventBrokerHost: "lsst8.ncsa.uiuc.edu"
   
   # receiving an event with this topic name will shut down the pipeline
   shutdownTopic: shutdownImageSubtractionDetection
   
   dir: {

      # the default root directory all files read or written by pipelines
      # deployed on this platform.  
      # This can be overriden by any of the "named role" directories below.
      #
      defaultRoot:  .

      runDirPattern: "../../%(runid)s"


      # These indicate the directory that should be used for a named purpose.
      # If relative paths are given, the resulting directory will be relative
      # to the default run directory (determined by defaultRoot and the 
      # runDirPattern).  These can be given as patterns specified in the same 
      # format as runDirPattern.  (If a directory is given as an absolute path,
      # using a pattern is recommended in order to distinguish between different 
      # production runs.)
      #
      work:     work    # the working directory, where the pipeline is started
      input:    input    # the directory to cache/find input data
      output:   output    # the directory to write output data
      update:   update    # the directory where updatable data is deployed
      scratch:  scratch    # a directory for temporary files that may be deleted 
                     #   upon completion of the pipeline

   }


   ##
   # Stage configuration
   
   # Transform slice id into amp, CCD, and other identifiers
   appStage: {
      stageName: "lsst.ctrl.dc3pipe.SliceInfoStage.SliceInfoStage"
      eventTopic: "None"
      stagePolicy: "IPSD/sliceInfo_policy.paf"
   }
   
   # Link input files into input directory
   appStage: {
      stageName: "lsst.pex.harness.SymLinkStage.SymLinkStage"
      eventTopic: "None"
      stagePolicy: "IPSD/symLink_policy.paf"
   }
   
   # Load input image (exposure 0)
   appStage: {
      stageName: "lsst.pex.harness.IOStage.InputStage"
      eventTopic: "triggerImageprocEvent0"
      stagePolicy: "IPSD/imageInput0_policy.paf"
   }
   
   # Transform input event into visit metadata (exposure 0)
   appStage: {
      stageName: "lsst.ctrl.dc3pipe.VisitMetadataStage.VisitMetadataStage"
      eventTopic: "None"
      stagePolicy: "IPSD/visitMetadata0_policy.paf"
   }
   
   # Transform image metadata into LSST standard (exposure 0)
   appStage: {
      stageName: "lsst.ctrl.dc3pipe.MetadataStages.TransformMetadataStage"
      eventTopic: "None"
      stagePolicy: "IPSD/transformMetadata0_policy.paf"
   }
   
   # Validate that metadata is in LSST standard form (exposure 0)
   appStage: {
      stageName: "lsst.ctrl.dc3pipe.MetadataStages.ValidateMetadataStage"
      eventTopic: "None"
      stagePolicy: "IPSD/validateMetadata0_policy.paf"
   }
   
   # Persist the per-visit metadata (exposure 0)
   appStage: {
      stageName: "lsst.pex.harness.IOStage.OutputStage"
      eventTopic: "None"
      stagePolicy: "IPSD/visitMetadataOutput0_policy.paf"
   }

   # Persist the per-exposure metadata and the raw image (exposure 0)
   appStage: {
      stageName: "lsst.pex.harness.IOStage.OutputStage"
      eventTopic: "None"
      stagePolicy: "IPSD/rawImageAndMetadataOutput0_policy.paf"
   }
   
   # Determine which calibration data products to load
   appStage: {
      stageName: "lsst.ip.isr.IdentifyCalibrationProductsStage.IdentifyCalibrationProductsStage"
      eventTopic: "None"
      stagePolicy: "IPSD/identifyCalibrationProducts_policy.paf"
   }
   
   # Load the calibration data products
   appStage: {
      stageName: "lsst.pex.harness.IOStage.InputStage"
      eventTopic: "None"
      stagePolicy: "IPSD/calibrationInput_policy.paf"
   }
   
   # Transform calibration exposure metadata into LSST standard (exposure 0)
   appStage: {
      stageName: "lsst.ctrl.dc3pipe.MetadataStages.TransformExposureMetadataStage"
      eventTopic: "None"
      stagePolicy: "IPSD/transformCalibrationMetadata_policy.paf"
   }

   # Perform ISR (exposure 0)
   appStage: {
      stageName: "lsst.ip.isr.IsrStage"
      eventTopic: "None"
      stagePolicy: "IPSD/isr0_policy.paf"
   }
   
   # Detect sources for WCS (exposure 0)
   appStage: {
      stageName: "lsst.meas.pipeline.SourceDetectionStage"
      eventTopic: "None"
      stagePolicy: "IPSD/sourceDetection0_policy.paf"
   }
   
   # Measure sources for WCS (exposure 0)
   appStage: {
      stageName: "lsst.meas.pipeline.SourceMeasurementStage"
      eventTopic: "None"
      stagePolicy: "IPSD/sourceMeasurement0_policy.paf"
   }
   
   # Persist calibrated exposure and sources (exposure 0)
   appStage: {
      stageName: "lsst.pex.harness.IOStage.OutputStage"
      eventTopic: "None"
      stagePolicy: "IPSD/exposureAndWcsSourcesOutput0_policy.paf"
   }

   # Determine PSF (exposure 0)
   appStage: {
      stageName: "lsst.meas.pipeline.PsfDeterminationStage"
      eventTopic: "None"
      stagePolicy: "IPSD/psfDetermination0_policy.paf"
   }
   
   # Persist PSF (exposure 0)
   appStage: {
      stageName: "lsst.pex.harness.IOStage.OutputStage"
      eventTopic: "None"
      stagePolicy: "IPSD/psfOutput0_policy.paf"
   }
   
#    # Load input image (exposure 1)
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.InputStage"
#       eventTopic: "triggerImageprocEvent1"
#       stagePolicy: "IPSD/imageInput1_policy.paf"
#    }
#    
#    # Transform input event into visit metadata (exposure 1)
#    appStage: {
#       stageName: "lsst.ctrl.dc3pipe.VisitMetadataStage.VisitMetadataStage"
#       eventTopic: "None"
#       stagePoliicy: "IPSD/visitMetadata1_policy.paf"
#    }
#    
#    # Transform image metadata into LSST standard (exposure 1)
#    appStage: {
#       stageName: "lsst.ctrl.dc3pipe.MetadataStages.TransformMetadataStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/transformMetadata1_policy.paf"
#    }
#    
#    # Validate that metadata is in LSST standard form (exposure 1)
#    appStage: {
#       stageName: "lsst.ctrl.dc3pipe.MetadataStages.ValidateMetadataStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/validateMetadata1_policy.paf"
#    }
#    
#    # Persist the per-visit metadata (exposure 1)
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.OutputStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/visitMetadataOutput1_policy.paf"
#    }
# 
#    # Persist the per-exposure metadata and the raw image (exposure 1)
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.OutputStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/rawImageAndMetadataOutput1_policy.paf"
#    }
#    
#    # Perform ISR (exposure 1)
#    appStage: {
#       stageName: "lsst.ip.isr.IsrStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/isr1_policy.paf"
#    }
#    
#    # Load WCS sources from entire CCD
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.InputStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/wcsSourcesInput_policy.paf"
#    }
   
#    # Determine WCS based on CCD's WCS sources
#    appStage: {
#       stageName: "lsst.meas.pipeline.WcsDeterminationStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/wcsDetermination_policy.paf"
#    }
#    
#    # Persist calibrated science exposures
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.OutputStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/calibratedExposuresOutput_policy.paf"
#    }
#    
#    # Load WCS from template image
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.InputStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/templateMetadataInput_policy.paf"
#    }
#    
#    appStage: {
#       stageName: "lsst.ctrl.dc3pipe.TemplateDimensionStage.TemplateDimensionStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/templateDimension_policy.paf"
#    }
#
#    # Determine bounding box of exposures within template image
#    appStage: {
#       stageName: "lsst.ip.diffim.TemplateBBoxStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/templateBBox_policy.paf"
#    }
#    
#    # Load subimage of template corresponding to exposure
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.InputStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/templateSubimageInput_policy.paf"
#    }
#    
#    # Subtract template from exposure (exposure 0)
#    appStage: {
#       stageName: "lsst.ip.diffim.ImageDifferenceStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/imageDifference0_policy.paf"
#    }
#    
#    # Subtract template from exposure (exposure 1)
#    appStage: {
#       stageName: "lsst.ip.diffim.ImageDifferenceStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/imageDifference1_policy.paf"
#    }
#    
#    # Persist difference images and kernels
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.OutputStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/differenceImageAndKernelOutput_policy.paf"
#    }
#    
#    # Co-add difference images and detect DIASources
#    appStage: {
#       stageName: "lsst.meas.pipeline.AddAndDetectStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/addAndDetect_policy.paf"
#    }
#    
#    # Measure DIASources in both exposures
#    appStage: {
#       stageName: "lsst.meas.pipeline.SourceMeasurementStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/diaSourceMeasurement_policy.paf"
#    }
# 
#    # Conver the Sources to Dia sources
#    appStage :{
#       stageName: "lsst.meas.pipeline.SourceToDiaSourceStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/sourceToDiaSource_policy.paf"
#    }
# 
#    # Classify DIASources
#    appStage: {
#       stageName: "lsst.meas.pipeline.SourceClassificationStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/sourceClassification_policy.paf"
#    }
#    
#    # Persist DIASources
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.OutputStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/diaSourceOutput_policy.paf"
#    }
#    
#    # Persist SDQA ratings
#    appStage: {
#       stageName: "lsst.pex.harness.IOStage.OutputStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/sdqaOutput_policy.paf"
#    }
#    
#    # Send an event to the association pipeline indicating that
#    # new detections are available
#    appStage: {
#       stageName: "lsst.pex.harness.EventStage.EventStage"
#       eventTopic: "None"
#       stagePolicy: "IPSD/associationEvent_policy.paf"
#    }
}
